name: Review Pull Request with LlamaCPP

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: ["main"]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  llama-cpp:
    if: ${{ !contains(github.event.pull_request.labels.*.name, 'skip-ai-review') }}
    continue-on-error: true
    runs-on: ubuntu-latest
    name: LlamaCPP
    permissions:
      pull-requests: write
      contents: read
    timeout-minutes: 120
    env:
      LLAMA_CPP_COMMIT: 42ae10bbcd7b56f29a302c86796542a6dadf46c9
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create temporary directory
        run: mkdir -p /tmp/llama_review

      - name: Process PR description
        id: process_pr
        run: |
          PR_BODY_ESCAPED=$(cat << 'EOF'
          ${{ github.event.pull_request.body }}
          EOF
          )
          PROCESSED_BODY=$(echo "$PR_BODY_ESCAPED" | sed -E 's/\[(.*?)\]\(.*?\)/\1/g')
          echo "$PROCESSED_BODY" > /tmp/llama_review/processed_body.txt

      - name: Fetch branches and output the diff in this step
        run: |
          git fetch origin main:main
          git fetch origin pull/${{ github.event.pull_request.number }}/head:pr-branch
          git diff main..pr-branch > /tmp/llama_review/diff.txt

      - name: Write prompt to file
        id: build_prompt
        run: |
          PR_TITLE=$(echo "${{ github.event.pull_request.title }}" | sed 's/[()]/\\&/g')
          DIFF_CONTENT=$(cat /tmp/llama_review/diff.txt)
          PROCESSED_BODY=$(cat /tmp/llama_review/processed_body.txt)
          echo "<|im_start|>system
          You are an experienced Pull Request (PR) Reviewer with extensive knowledge of software development best practices. Your role is to review code changes and provide constructive, actionable feedback.
          You are working on ${{ github.event.repository.name }} repository, which has the following description: \"${{ github.event.repository.description }}\".
          You are currently reviewing a pull request titled \"$PR_TITLE\", from the branch \"${{ github.event.pull_request.head.ref }}\".
          Follow these guidelines:

          1. Initial Assessment
          - First, understand the PR's purpose and scope
          - Check if the PR is appropriately sized (recommend splitting if too large)
          - Verify the PR title and description are clear and descriptive
          - Ensure the PR addresses a single concern or related set of changes

          2. Technical Review
          - Evaluate code for:
            * Correctness and functionality
            * Performance implications
            * Security vulnerabilities
            * Edge cases and error handling
            * Test coverage and quality
            * Architecture and design patterns
            * Code duplication
            * Potential bugs
          - Verify adherence to project's coding standards and conventions
          - Check for clear naming conventions and code readability
          - Review documentation updates if applicable

          3. Feedback Delivery
          - Be specific in your comments
          - Focus on the code, not the developer
          - Explain the "why" behind significant suggestions
          - Use a constructive and respectful tone
          - Differentiate between required changes and optional improvements
          - Provide examples when suggesting alternatives
          - Acknowledge good practices and improvements

          4. Priority Levels
          Categorize your feedback using these levels:
          - Blocking: Must be fixed (security issues, bugs, broken functionality)
          - Important: Should be fixed (performance issues, maintainability concerns)
          - Minor: Nice to have (style improvements, small optimizations)
          - Praise: Highlight excellent solutions or improvements

          5. Response Format
          Structure your review as follows:
          1. Overall Summary
          2. Major Concerns (if any)
          3. Detailed Feedback (organized by file/component)
          4. Positive Highlights
          5. Final Recommendation (Approve/Request Changes/Comment)

          Remember:
          - Stay objective and professional
          - Focus on improvement rather than criticism
          - Consider the context and constraints of the changes
          - Be thorough but pragmatic
          - Suggest specific solutions when pointing out problems
          - Consider both immediate impact and long-term maintainability

          Your goal is to help improve code quality while maintaining a collaborative and positive review process that encourages learning and growth.<|im_end|>
          <|im_start|>user
          This is the description of the pull request:
          \`\`\`markdown
          $PROCESSED_BODY
          \`\`\`

          And here is the diff of the changes, for you to review:
          \`\`\`diff
          $DIFF_CONTENT
          \`\`\`
          <|im_end|>
          <|im_start|>assistant
          ### Overall Summary
          " > /tmp/llama_review/prompt.txt

      - name: Show Prompt
        run: cat /tmp/llama_review/prompt.txt

      - name: Cache LlamaCPP
        id: cache_llama_cpp
        uses: actions/cache@v4
        with:
          path: ~/.cache/llama.cpp/
          key: llama-cpp-${{ runner.os }}-${{ env.LLAMA_CPP_COMMIT }}

      - name: Clone and build LlamaCPP
        if: steps.cache_llama_cpp.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/ggerganov/llama.cpp.git
          cd llama.cpp
          git checkout ${{ env.LLAMA_CPP_COMMIT }}
          make -j llama-cli
          mkdir -p ~/.cache/llama.cpp/
          cp llama-cli ~/.cache/llama.cpp/
          curl -L -o ~/.cache/llama.cpp/model.gguf https://huggingface.co/bartowski/Qwen2.5-Coder-14B-Instruct-GGUF/resolve/main/Qwen2.5-Coder-14B-Instruct-Q5_K_M.gguf

      - name: Copy LlamaCPP to /usr/local/bin/
        run: cp ~/.cache/llama.cpp/llama-cli /usr/local/bin/

      - name: Run LlamaCPP
        run: |
          PROMPT=$(cat /tmp/llama_review/prompt.txt)
          llama-cli \
            -m ~/.cache/llama.cpp/model.gguf \
            -p "$PROMPT" \
            -e \
            --ctx-size 32768 \
            -np 1 \
            -t -1 \
            -n -1 \
            --temp 0.5 \
            --top-p 0.9 \
            --min-p 0.1 \
            --top-k 0 \
            --cache-type-k q8_0 \
            --cache-type-v q8_0 \
            --flash-attn \
            --no-display-prompt > /tmp/llama_review/response.txt

      - name: Show Response
        run: cat /tmp/llama_review/response.txt

      - name: Find Comment
        uses: peter-evans/find-comment@v3
        id: find_comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "[end of text]"

      - name: Post or Update PR Review
        uses: peter-evans/create-or-update-comment@v4
        with:
          comment-id: ${{ steps.find_comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body-path: /tmp/llama_review/response.txt
          edit-mode: replace
